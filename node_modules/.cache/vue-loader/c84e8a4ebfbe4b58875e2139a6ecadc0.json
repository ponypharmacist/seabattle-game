{"remainingRequest":"D:\\git\\warships-evasive\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\git\\warships-evasive\\src\\components\\FieldGrid.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\git\\warships-evasive\\src\\components\\FieldGrid.vue","mtime":1557913826968},{"path":"D:\\git\\warships-evasive\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\git\\warships-evasive\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\git\\warships-evasive\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\git\\warships-evasive\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\git\\warships-evasive\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters, mapMutations } from 'vuex'\n\nexport default {\n  name: 'FieldGrid',\n  props: {\n    player: String,\n  },\n\n  computed: {\n    ...mapGetters([\n      'getFieldByParams',\n      'getShipsAvailableByType',\n      'getShipsAvailableAll',\n      'isTileForbidden',\n      'isTileShip',\n      'opponentFieldCheck',\n    ]),\n  },\n\n  methods: {\n    ...mapMutations([\n      'sendAlertMessage',\n      'placeShipHead',\n      'placeShipTiles',\n      'placeForbiddenTiles',\n      'placeMine',\n      'setShipType',\n      'markShipDamaged',\n    ]),\n\n    placeShip (row, col) {\n      let type = this.$store.state.shipPlaceType\n      // Check if there are available ships of selected type\n      if ( this.getShipsAvailableAll <= 0 ) {\n        this.sendAlertMessage('Все корабли запущены. Пора идти в атаку.')\n        return\n      } else if ( this.getShipsAvailableByType(type) <= 0 ) {\n        this.sendAlertMessage('Таких кораблей больше нет. Пиратский бюджет, крюком его по япкам!')\n        this.switchShipButtons(type)\n        return\n      }\n      // Determine size\n      let orientation = this.$store.state.shipPlaceOrientation\n      let size = 1\n      if (type == 'big') {\n        size = 4\n      } else if (type == 'medium') {\n        size = 3\n      } else if (type == 'small') {\n        size = 2\n      } else {\n        size = 1\n      }\n      // Check if placeable\n      let shipTiles = this.getShipTiles(row, col, orientation, size)\n      let isPlaceable = this.checkPlaceability (row, col, orientation, size, shipTiles)\n      if ( isPlaceable ) {\n        // Place head\n        this.placeShipHead ({row: row, col: col, type: type, size: size, orientation: orientation, tiles: shipTiles})\n        // Place ship tiles\n        this.placeShipTiles (shipTiles)\n        // Place forbidden tiles\n        let forbidTiles = this.getTilesToForbid(row, col, orientation, size)\n        this.placeForbiddenTiles (forbidTiles)\n      } else {\n        return\n      }\n      // Cycle ship selection buttons\n      this.switchShipButtons(type)\n    },\n\n    // Switch ship type button to the right if no more ships of this type left\n    switchShipButtons (type) {\n      if (this.getShipsAvailableByType(type) == 0) {\n        if (type == 'big') {\n          this.setShipType('medium')\n        } else if (type == 'medium') {\n          this.setShipType('small')\n        } else if (type == 'small') {\n          this.setShipType('tiny')\n        } else if (type == 'tiny' && this.getShipsAvailableAll !== 0) {\n          this.setShipType('big')\n        } \n      }\n    },\n\n    // Generate a list of ship tiles\n    getShipTiles (row, col, orientation, size) {\n      var shipTiles = [{row: row, col: col}]\n      for (let i = 1; i < size; i++) {\n        if (orientation == 'width') {\n          shipTiles.push({row: row, col: col + i})\n        } else {\n          shipTiles.push({row: row + i, col: col})\n        }\n      }\n      return shipTiles\n    },\n\n    getTilesToForbid (row, col, orientation, size) {\n      let forbidTiles = []\n\n      if (orientation == 'width') {\n        let rowWidth = size + 2\n        for (let i = 0; i < rowWidth; i++) {\n          if ( 0 <= (row - 1) && 0 <= (col - 1 + i) && (col - 1 + i) <= 9 ) {\n            forbidTiles.push({ row: row - 1, col: col - 1 + i })\n          }\n          if ( (row + 1) <= 9 && 0 <= (col - 1 + i) && (col - 1 + i) <= 9 ) {\n            forbidTiles.push({ row: row + 1, col: col - 1 + i })\n          }\n        }\n        if( 0 <= (col - 1) ) { forbidTiles.push({ row: row, col: col - 1 }) }\n        if( (col + size) <= 9 ) { forbidTiles.push({ row: row, col: col + size }) }\n      } else {\n        let rowHeight = size + 2\n        for (let j = 0; j < rowHeight; j++) {\n          if ( 0 <= (col - 1) && 0 <= (row - 1 + j) && (row - 1 + j) <= 9 ) {\n            forbidTiles.push({ col: col - 1, row: row - 1 + j })\n          }\n          if ( (col + 1) <= 9 && 0 <= (row - 1 + j) && (row - 1 + j) <= 9 ) {\n            forbidTiles.push({ col: col + 1, row: row - 1 + j })\n          }\n        }\n        if( 0 <= (row - 1) ) { forbidTiles.push({ row: row - 1, col: col }) }\n        if( (row + size) <= 9 ) { forbidTiles.push({ row: row + size, col: col }) }\n      }\n\n      return forbidTiles\n    },\n\n    checkPlaceability (row, col, orientation, size, shipTiles) {\n      let shipEnd = {row: row, col: col}\n\n      if (orientation == 'width') {\n        shipEnd.col = col - 1 + size\n      } else {\n        shipEnd.row = row - 1 + size\n      }\n      // 1. Check if ship sticks outside the board\n      if (shipEnd.col > 9 || shipEnd.row > 9) {\n        this.sendAlertMessage('Корабль никак не может торчать за картой!')\n        return false\n      }\n      // 2. Check if ship tiles will cross with forbidden\n      // 2.1. Check each ship tile against forbidden cells and ship cells\n      for (let tile of shipTiles) {\n        if ( this.isTileForbidden(tile.row, tile.col) || this.isTileShip(tile.row, tile.col) ) {\n          this.sendAlertMessage('Таранить будем чужие корабли, свои не надо.')\n          return false\n        }\n      }\n      return true \n    },\n\n    printForbidden () {\n      this.sendAlertMessage('Тут уже что-то есть!')\n    },\n  }\n\n}\n",null]}
{"remainingRequest":"D:\\git\\warships-evasive\\node_modules\\babel-loader\\lib\\index.js!D:\\git\\warships-evasive\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\git\\warships-evasive\\src\\store.js","dependencies":[{"path":"D:\\git\\warships-evasive\\src\\store.js","mtime":1557946419890},{"path":"D:\\git\\warships-evasive\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\git\\warships-evasive\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\git\\warships-evasive\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _JSON$stringify from \"D:\\\\git\\\\warships-evasive\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/json/stringify\";\nimport _getIterator from \"D:\\\\git\\\\warships-evasive\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/get-iterator\";\nimport \"core-js/modules/es6.string.small\";\nimport \"core-js/modules/es6.string.big\";\nimport \"core-js/modules/es6.function.name\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    alertMessage: 'Hello, beautiful!',\n    turnCount: 0,\n    // gameMenu, readyPlayerOne, placeShipsOne, readyPlayerTwo, placeShipsTwo, readyPlayerOne, goPlayerOne, readyPlayerTwo, goPlayerTwo\n    currentPhase: 'gameMenu',\n    currentPlayer: 'playerOne',\n    opponent: 'playerTwo',\n    shipPlaceType: 'big',\n    shipPlaceOrientation: 'height',\n    showSettings: false,\n    playerOne: {\n      name: 'Лихая Русалка',\n      imageUrl: '',\n      movesAvailable: 1,\n      shotsAvailable: 1,\n      lastShot: '',\n      availableShips: {\n        big: 1,\n        medium: 2,\n        small: 3,\n        tiny: 4\n      },\n      field: [],\n      ships: []\n    },\n    playerTwo: {\n      name: 'Волчья Голова',\n      imageUrl: '',\n      movesAvailable: 1,\n      shotsAvailable: 1,\n      lastShot: '',\n      availableShips: {\n        big: 1,\n        medium: 2,\n        small: 3,\n        tiny: 4\n      },\n      field: [],\n      ships: []\n    }\n  },\n  getters: {\n    // General Interfrace\n    getCurrentPlayerName: function getCurrentPlayerName(state) {\n      return state[state.currentPlayer].name;\n    },\n    getCurrentAvatar: function getCurrentAvatar(state) {\n      return state[state.currentPlayer].imageUrl ? 'background-image: url(' + state[state.currentPlayer].imageUrl + ');' : '';\n    },\n    // Utility and mechanics\n    isMovesLeft: function isMovesLeft(state) {\n      return state[state.currentPlayer].movesAvailable > 0;\n    },\n    isShotsLeft: function isShotsLeft(state) {\n      return state[state.currentPlayer].shotsAvailable > 0;\n    },\n    getMovesLeft: function getMovesLeft(state) {\n      return state[state.currentPlayer].movesAvailable;\n    },\n    getShotsLeft: function getShotsLeft(state) {\n      return state[state.currentPlayer].shotsAvailable;\n    },\n    getFieldByParams: function getFieldByParams(state) {\n      return function (player) {\n        return state[player].field;\n      };\n    },\n    getShipsByPlayer: function getShipsByPlayer(state) {\n      return function (player) {\n        return state[player].ships;\n      };\n    },\n    getShipsAvailableByType: function getShipsAvailableByType(state) {\n      return function (type) {\n        return state[state.currentPlayer].availableShips[type];\n      };\n    },\n    getShipsAvailableAll: function getShipsAvailableAll(state) {\n      var shipsAvailable = state[state.currentPlayer].availableShips;\n      return shipsAvailable['big'] + shipsAvailable['medium'] + shipsAvailable['small'] + shipsAvailable['tiny'];\n    },\n    isTileForbidden: function isTileForbidden(state) {\n      return function (row, col) {\n        return state[state.currentPlayer].field[row][col].forbid;\n      };\n    },\n    isTileShip: function isTileShip(state) {\n      return function (row, col) {\n        return state[state.currentPlayer].field[row][col].ship;\n      };\n    },\n    opponentFieldCheck: function opponentFieldCheck(state) {\n      return function (row, col, item) {\n        return state[state.opponent].field[row][col][item];\n      };\n    },\n    isControlDisabled: function isControlDisabled(state) {\n      return function (row, col, size, direction) {\n        var grid = state[state.currentPlayer].field; // Check for mines and ships in set directions\n\n        if (direction == 'up' && row - 1 >= 0) {\n          if (grid[row - 1][col].mine) {\n            return true;\n          }\n\n          if (row - 2 >= 0 && grid[row - 2][col].ship) {\n            return true;\n          }\n\n          if (row - 2 >= 0 && col - 1 >= 0 && grid[row - 2][col - 1].ship) {\n            return true;\n          }\n\n          if (row - 2 >= 0 && col + 1 <= 9 && grid[row - 2][col + 1].ship) {\n            return true;\n          }\n        } else if (direction == 'down' && row + size <= 9) {\n          if (grid[row + size][col].mine) {\n            return true;\n          }\n\n          if (row + size + 1 <= 9 && grid[row + size + 1][col].ship) {\n            return true;\n          }\n\n          if (row + size + 1 <= 9 && col - 1 >= 0 && grid[row + size + 1][col - 1].ship) {\n            return true;\n          }\n\n          if (row + size + 1 <= 9 && col + 1 <= 9 && grid[row + size + 1][col + 1].ship) {\n            return true;\n          }\n        } else if (direction == 'left' && col - 1 >= 0) {\n          if (grid[row][col - 1].mine) {\n            return true;\n          }\n\n          if (col - 2 >= 0 && grid[row][col - 2].ship) {\n            return true;\n          }\n\n          if (col - 2 >= 0 && row - 1 >= 0 && grid[row - 1][col - 2].ship) {\n            return true;\n          }\n\n          if (col - 2 >= 0 && row + 1 <= 9 && grid[row + 1][col - 2].ship) {\n            return true;\n          }\n        } else if (direction == 'right' && col + size <= 9) {\n          if (grid[row][col + size].mine) {\n            return true;\n          }\n\n          if (col + size + 1 <= 9 && grid[row][col + size + 1].ship) {\n            return true;\n          }\n\n          if (col + size + 1 <= 9 && row - 1 >= 0 && grid[row - 1][col + size + 1].ship) {\n            return true;\n          }\n\n          if (col + size + 1 <= 9 && row + 1 <= 9 && grid[row + 1][col + size + 1].ship) {\n            return true;\n          }\n\n          return grid[row][col + size].mine ? true : col + size + 1 <= 9 && grid[row][col + size + 1].ship;\n        } else {\n          return false;\n        }\n      };\n    },\n    getDamagedShip: function getDamagedShip(state) {\n      return function (row, col) {\n        var theirShips = state[state.opponent].ships;\n        var targetShip = {}; // Get damaged ship specs\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = _getIterator(theirShips), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var ship = _step.value;\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = _getIterator(ship.tiles), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var section = _step2.value;\n\n                if (row == section.row && col == section.col) {\n                  targetShip = {\n                    size: ship.size,\n                    row: ship.row,\n                    col: ship.col,\n                    orientation: ship.orientation\n                  };\n                }\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return targetShip;\n      };\n    },\n    isShipDead: function isShipDead(state) {\n      return function (damagedShip) {\n        var deadTilesCount = 0;\n        var theirShips = state[state.opponent].ships;\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = _getIterator(theirShips), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var ship = _step3.value;\n\n            if (damagedShip.row == ship.tiles[0].row && damagedShip.col == ship.tiles[0].col) {\n              if (damagedShip.orientation == 'height') {\n                for (var i = 0; i < damagedShip.size; i++) {\n                  if (state[state.opponent].field[damagedShip.row + i][damagedShip.col].ship && state[state.opponent].field[damagedShip.row + i][damagedShip.col].mine) {\n                    deadTilesCount++;\n                  }\n                }\n              } else {\n                for (var _i = 0; _i < damagedShip.size; _i++) {\n                  if (state[state.opponent].field[damagedShip.row][damagedShip.col + _i].ship && state[state.opponent].field[damagedShip.row][damagedShip.col + _i].mine) {\n                    deadTilesCount++;\n                  }\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n\n        return deadTilesCount == damagedShip.size;\n      };\n    },\n    checkWinCondition: function checkWinCondition(state) {\n      var deadShipsNumber = 0;\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = _getIterator(state[state.opponent].ships), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var ship = _step4.value;\n\n          if (ship.isDead) {\n            deadShipsNumber++;\n          }\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      return deadShipsNumber == 10;\n    }\n  },\n  mutations: {\n    // General Interface\n    sendAlertMessage: function sendAlertMessage(state, message) {\n      state.alertMessage = message;\n    },\n    setCurrentPhase: function setCurrentPhase(state, phase) {\n      state.currentPhase = phase;\n    },\n    updateCurrentPlayerName: function updateCurrentPlayerName(state, e) {\n      state[state.currentPlayer].name = e.target.value;\n    },\n    updateImageUrlOne: function updateImageUrlOne(state, e) {\n      state.playerOne.imageUrl = e.target.value;\n    },\n    updateImageUrlTwo: function updateImageUrlTwo(state, e) {\n      state.playerTwo.imageUrl = e.target.value;\n    },\n    populateFieldByPlayer: function populateFieldByPlayer(state, player) {\n      var targetPlayer = player ? player : state.currentPlayer;\n      var tiles = [];\n\n      for (var i = 0; i < 10; i++) {\n        var row = [];\n\n        for (var k = 0; k < 10; k++) {\n          row.push({\n            forbid: false,\n            mine: false,\n            dead: false\n          });\n        }\n\n        tiles.push(row);\n      }\n\n      state[targetPlayer].field = tiles;\n    },\n    toggleSettings: function toggleSettings(state) {\n      state.showSettings = !state.showSettings;\n    },\n    // Utility and Mechanics\n    setLastShot: function setLastShot(state, coordinates) {\n      var coordinateLetter = 'A';\n\n      switch (coordinates.col) {\n        case 1:\n          coordinateLetter = 'A';\n          break;\n\n        case 2:\n          coordinateLetter = 'B';\n          break;\n\n        case 3:\n          coordinateLetter = 'C';\n          break;\n\n        case 4:\n          coordinateLetter = 'D';\n          break;\n\n        case 5:\n          coordinateLetter = 'E';\n          break;\n\n        case 6:\n          coordinateLetter = 'F';\n          break;\n\n        case 7:\n          coordinateLetter = 'G';\n          break;\n\n        case 8:\n          coordinateLetter = 'H';\n          break;\n\n        case 9:\n          coordinateLetter = 'I';\n          break;\n\n        case 10:\n          coordinateLetter = 'J';\n          break;\n      }\n\n      state[state.currentPlayer].lastShot = coordinateLetter + coordinates.row;\n    },\n    reduceMovesAvailable: function reduceMovesAvailable(state) {\n      state[state.currentPlayer].movesAvailable--;\n    },\n    reduceShotsAvailable: function reduceShotsAvailable(state) {\n      state[state.currentPlayer].shotsAvailable--;\n    },\n    setShipType: function setShipType(state, type) {\n      state.shipPlaceType = type;\n    },\n    toggleOrientation: function toggleOrientation(state) {\n      if (state.shipPlaceOrientation == 'height') {\n        state.shipPlaceOrientation = 'width';\n      } else {\n        state.shipPlaceOrientation = 'height';\n      }\n    },\n    placeMine: function placeMine(state, specs) {\n      state[state.opponent].field[specs.row][specs.col].mine = true;\n    },\n    markShipDamaged: function markShipDamaged(state, specs) {\n      var theirShips = state[state.opponent].ships;\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = _getIterator(theirShips), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var ship = _step5.value;\n          var _iteratorNormalCompletion6 = true;\n          var _didIteratorError6 = false;\n          var _iteratorError6 = undefined;\n\n          try {\n            for (var _iterator6 = _getIterator(ship.tiles), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n              var section = _step6.value;\n\n              if (specs.row == section.row && specs.col == section.col) {\n                ship.isDamaged = true;\n                return;\n              }\n            }\n          } catch (err) {\n            _didIteratorError6 = true;\n            _iteratorError6 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n                _iterator6.return();\n              }\n            } finally {\n              if (_didIteratorError6) {\n                throw _iteratorError6;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n    },\n    markShipDead: function markShipDead(state, deadShip) {\n      var theirShips = state[state.opponent].ships;\n      var _iteratorNormalCompletion7 = true;\n      var _didIteratorError7 = false;\n      var _iteratorError7 = undefined;\n\n      try {\n        for (var _iterator7 = _getIterator(theirShips), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n          var ship = _step7.value;\n\n          if (deadShip.row == ship.tiles[0].row && deadShip.col == ship.tiles[0].col) {\n            ship.isDead = true;\n            return;\n          }\n        }\n      } catch (err) {\n        _didIteratorError7 = true;\n        _iteratorError7 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n            _iterator7.return();\n          }\n        } finally {\n          if (_didIteratorError7) {\n            throw _iteratorError7;\n          }\n        }\n      }\n    },\n    placeDeadTiles: function placeDeadTiles(state, deadShip) {\n      var deadTiles = [];\n\n      if (deadShip.orientation == 'width') {\n        var rowWidth = deadShip.size + 2;\n\n        for (var i = 0; i < rowWidth; i++) {\n          if (0 <= deadShip.row - 1 && 0 <= deadShip.col - 1 + i && deadShip.col - 1 + i <= 9) {\n            deadTiles.push({\n              row: deadShip.row - 1,\n              col: deadShip.col - 1 + i\n            });\n          }\n\n          if (deadShip.row + 1 <= 9 && 0 <= deadShip.col - 1 + i && deadShip.col - 1 + i <= 9) {\n            deadTiles.push({\n              row: deadShip.row + 1,\n              col: deadShip.col - 1 + i\n            });\n          }\n        }\n\n        if (0 <= deadShip.col - 1) {\n          deadTiles.push({\n            row: deadShip.row,\n            col: deadShip.col - 1\n          });\n        }\n\n        if (deadShip.col + deadShip.size <= 9) {\n          deadTiles.push({\n            row: deadShip.row,\n            col: deadShip.col + deadShip.size\n          });\n        }\n      } else {\n        var rowHeight = deadShip.size + 2;\n\n        for (var j = 0; j < rowHeight; j++) {\n          if (0 <= deadShip.col - 1 && 0 <= deadShip.row - 1 + j && deadShip.row - 1 + j <= 9) {\n            deadTiles.push({\n              col: deadShip.col - 1,\n              row: deadShip.row - 1 + j\n            });\n          }\n\n          if (deadShip.col + 1 <= 9 && 0 <= deadShip.row - 1 + j && deadShip.row - 1 + j <= 9) {\n            deadTiles.push({\n              col: deadShip.col + 1,\n              row: deadShip.row - 1 + j\n            });\n          }\n        }\n\n        if (0 <= deadShip.row - 1) {\n          deadTiles.push({\n            row: deadShip.row - 1,\n            col: deadShip.col\n          });\n        }\n\n        if (deadShip.row + deadShip.size <= 9) {\n          deadTiles.push({\n            row: deadShip.row + deadShip.size,\n            col: deadShip.col\n          });\n        }\n      }\n\n      for (var _i2 = 0, _deadTiles = deadTiles; _i2 < _deadTiles.length; _i2++) {\n        var tile = _deadTiles[_i2];\n        state[state.opponent].field[tile.row][tile.col].dead = true;\n      }\n    },\n    placeShipHead: function placeShipHead(state, specs) {\n      if (state[state.currentPlayer].availableShips[specs.type] >= 1) {\n        var newShip = {\n          classification: '',\n          col: specs.col,\n          row: specs.row,\n          size: specs.size,\n          orientation: specs.orientation,\n          tiles: specs.tiles,\n          isDamaged: false,\n          isDead: false,\n          style: 'left: ' + specs.col * 10 + '%; top: ' + specs.row * 10 + '%; ' + specs.orientation + ': ' + specs.size * 10 + '%;'\n        };\n        newShip.classification = 'ship-' + state.shipPlaceType + ' ' + specs.orientation;\n        state[state.currentPlayer].ships.push(newShip);\n        state[state.currentPlayer].availableShips[specs.type]--;\n      } else {\n        return;\n      }\n    },\n    placeShipTiles: function placeShipTiles(state, shipTiles) {\n      var _iteratorNormalCompletion8 = true;\n      var _didIteratorError8 = false;\n      var _iteratorError8 = undefined;\n\n      try {\n        for (var _iterator8 = _getIterator(shipTiles), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n          var tile = _step8.value;\n          state[state.currentPlayer].field[tile.row][tile.col].ship = true;\n        }\n      } catch (err) {\n        _didIteratorError8 = true;\n        _iteratorError8 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n            _iterator8.return();\n          }\n        } finally {\n          if (_didIteratorError8) {\n            throw _iteratorError8;\n          }\n        }\n      }\n    },\n    moveShipTiles: function moveShipTiles(state, movingShip) {\n      var myShips = state[state.currentPlayer].ships; // Get damaged ship specs\n\n      var _iteratorNormalCompletion9 = true;\n      var _didIteratorError9 = false;\n      var _iteratorError9 = undefined;\n\n      try {\n        for (var _iterator9 = _getIterator(myShips), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n          var ship = _step9.value;\n\n          if (movingShip.row == ship.row && movingShip.col == ship.col) {\n            if (movingShip.direction == 'up') {\n              // mark new ship cell and unmark old ship cell\n              state[state.currentPlayer].field[ship.row - 1][ship.col].ship = true;\n              state[state.currentPlayer].field[ship.row - 1 + ship.size][ship.col].ship = false; // change ship coordinates\n\n              ship.row--; // pop'n'shift or push'n'unshift ship tiles array\n\n              ship.tiles.pop();\n              ship.tiles.unshift({\n                row: ship.row,\n                col: ship.col\n              });\n            } else if (movingShip.direction == 'down') {\n              state[state.currentPlayer].field[ship.row + ship.size][ship.col].ship = true;\n              state[state.currentPlayer].field[ship.row][ship.col].ship = false;\n              ship.tiles.shift();\n              ship.tiles.push({\n                row: ship.row + ship.size,\n                col: ship.col\n              });\n              ship.row++;\n            } else if (movingShip.direction == 'left') {\n              state[state.currentPlayer].field[ship.row][ship.col - 1].ship = true;\n              state[state.currentPlayer].field[ship.row][ship.col - 1 + ship.size].ship = false;\n              ship.col--;\n              ship.tiles.pop();\n              ship.tiles.unshift({\n                row: ship.row,\n                col: ship.col\n              });\n            } else if (movingShip.direction == 'right') {\n              state[state.currentPlayer].field[ship.row][ship.col + ship.size].ship = true;\n              state[state.currentPlayer].field[ship.row][ship.col].ship = false;\n              ship.tiles.shift();\n              ship.tiles.push({\n                row: ship.row,\n                col: ship.col + ship.size\n              });\n              ship.col++;\n            }\n\n            ship.style = 'left: ' + ship.col * 10 + '%; top: ' + ship.row * 10 + '%; ' + ship.orientation + ': ' + ship.size * 10 + '%;';\n            return;\n          }\n        }\n      } catch (err) {\n        _didIteratorError9 = true;\n        _iteratorError9 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n            _iterator9.return();\n          }\n        } finally {\n          if (_didIteratorError9) {\n            throw _iteratorError9;\n          }\n        }\n      }\n    },\n    placeForbiddenTiles: function placeForbiddenTiles(state, forbidTiles) {\n      var _iteratorNormalCompletion10 = true;\n      var _didIteratorError10 = false;\n      var _iteratorError10 = undefined;\n\n      try {\n        for (var _iterator10 = _getIterator(forbidTiles), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n          var tile = _step10.value;\n          state[state.currentPlayer].field[tile.row][tile.col].forbid = true;\n        }\n      } catch (err) {\n        _didIteratorError10 = true;\n        _iteratorError10 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion10 && _iterator10.return != null) {\n            _iterator10.return();\n          }\n        } finally {\n          if (_didIteratorError10) {\n            throw _iteratorError10;\n          }\n        }\n      }\n    },\n    resetField: function resetField(state) {\n      state[state.currentPlayer].ships = [];\n      state[state.currentPlayer].availableShips = {\n        big: 1,\n        medium: 2,\n        small: 3,\n        tiny: 4\n      };\n    }\n  },\n  actions: {\n    loadLocalData: function loadLocalData(context) {\n      // Player One\n      if (JSON.parse(localStorage.getItem('TenShipsPlayerOneName'))) {\n        context.state.playerOne.name = JSON.parse(localStorage.getItem('TenShipsPlayerOneName'));\n      }\n\n      if (JSON.parse(localStorage.getItem('TenShipsPlayerOneImage'))) {\n        context.state.playerOne.imageUrl = JSON.parse(localStorage.getItem('TenShipsPlayerOneImage'));\n      } // Player Two\n\n\n      if (JSON.parse(localStorage.getItem('TenShipsPlayerTwoName'))) {\n        context.state.playerTwo.name = JSON.parse(localStorage.getItem('TenShipsPlayerTwoName'));\n      }\n    },\n    advanceGamePhase: function advanceGamePhase(context) {\n      // Save stuff to Local Storage\n      localStorage.setItem('TenShipsPlayerOneName', _JSON$stringify(context.state.playerOne.name));\n      localStorage.setItem('TenShipsPlayerTwoName', _JSON$stringify(context.state.playerTwo.name)); // Advance game phases logic\n\n      switch (context.state.currentPhase) {\n        case 'readyPlayerOne':\n          context.state.currentPlayer = 'playerOne';\n          context.state.opponent = 'playerTwo';\n          context.state.currentPhase = 'goPlayerOne';\n          context.state.turnCount++;\n          context.state.alertMessage = 'Шел ' + context.state.turnCount + '-й день сражений. ';\n\n          if (context.state[context.state.opponent].lastShot) {\n            context.state.alertMessage += context.state[context.state.opponent].name + ' шлет привет в сектор ' + context.state[context.state.opponent].lastShot + '.';\n          }\n\n          context.state[context.state.currentPlayer].movesAvailable = 1;\n          context.state[context.state.currentPlayer].shotsAvailable = 1;\n          break;\n\n        case 'readyPlayerTwo':\n          context.state.currentPlayer = 'playerTwo';\n          context.state.opponent = 'playerOne';\n          context.state.alertMessage = 'Yarr!';\n\n          if (context.getters.getShipsAvailableAll == 0) {\n            context.state.currentPhase = 'goPlayerTwo';\n            context.state[context.state.currentPlayer].movesAvailable = 1;\n            context.state[context.state.currentPlayer].shotsAvailable = 1;\n            context.state.alertMessage = 'Шел ' + context.state.turnCount + '-й день сражений. ';\n\n            if (context.state[context.state.opponent].lastShot) {\n              context.state.alertMessage += context.state[context.state.opponent].name + ' шлет привет в сектор ' + context.state[context.state.opponent].lastShot + '.';\n            }\n          } else {\n            context.state.currentPhase = 'placeShipsTwo';\n          }\n\n          break;\n\n        case 'placeShipsOne':\n        case 'goPlayerOne':\n          context.state.currentPhase = 'readyPlayerTwo';\n          break;\n\n        case 'placeShipsTwo':\n        case 'goPlayerTwo':\n          context.state.currentPhase = 'readyPlayerOne';\n          break;\n\n        default:\n          context.state.currentPhase = 'placeShipsOne';\n      }\n    }\n  }\n});",{"version":3,"sources":["D:\\git\\warships-evasive\\src\\store.js"],"names":["Vue","Vuex","use","Store","state","alertMessage","turnCount","currentPhase","currentPlayer","opponent","shipPlaceType","shipPlaceOrientation","showSettings","playerOne","name","imageUrl","movesAvailable","shotsAvailable","lastShot","availableShips","big","medium","small","tiny","field","ships","playerTwo","getters","getCurrentPlayerName","getCurrentAvatar","isMovesLeft","isShotsLeft","getMovesLeft","getShotsLeft","getFieldByParams","player","getShipsByPlayer","getShipsAvailableByType","type","getShipsAvailableAll","shipsAvailable","isTileForbidden","row","col","forbid","isTileShip","ship","opponentFieldCheck","item","isControlDisabled","size","direction","grid","mine","getDamagedShip","theirShips","targetShip","tiles","section","orientation","isShipDead","damagedShip","deadTilesCount","i","checkWinCondition","deadShipsNumber","isDead","mutations","sendAlertMessage","message","setCurrentPhase","phase","updateCurrentPlayerName","e","target","value","updateImageUrlOne","updateImageUrlTwo","populateFieldByPlayer","targetPlayer","k","push","dead","toggleSettings","setLastShot","coordinates","coordinateLetter","reduceMovesAvailable","reduceShotsAvailable","setShipType","toggleOrientation","placeMine","specs","markShipDamaged","isDamaged","markShipDead","deadShip","placeDeadTiles","deadTiles","rowWidth","rowHeight","j","tile","placeShipHead","newShip","classification","style","placeShipTiles","shipTiles","moveShipTiles","movingShip","myShips","pop","unshift","shift","placeForbiddenTiles","forbidTiles","resetField","actions","loadLocalData","context","JSON","parse","localStorage","getItem","advanceGamePhase","setItem"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    alertMessage: 'Hello, beautiful!',\n    turnCount: 0,\n    // gameMenu, readyPlayerOne, placeShipsOne, readyPlayerTwo, placeShipsTwo, readyPlayerOne, goPlayerOne, readyPlayerTwo, goPlayerTwo\n    currentPhase: 'gameMenu',\n    currentPlayer: 'playerOne',\n    opponent: 'playerTwo',\n\n    shipPlaceType: 'big',\n    shipPlaceOrientation: 'height',\n\n    showSettings: false,\n\n    playerOne: {\n      name: 'Лихая Русалка',\n      imageUrl: '',\n      movesAvailable: 1,\n      shotsAvailable: 1,\n      lastShot: '',\n      availableShips: {\n        big: 1,\n        medium: 2,\n        small: 3,\n        tiny: 4\n      },\n      field: [],\n      ships: [],\n    },\n\n    playerTwo: {\n      name: 'Волчья Голова',\n      imageUrl: '',\n      movesAvailable: 1,\n      shotsAvailable: 1,\n      lastShot: '',\n      availableShips: {\n        big: 1,\n        medium: 2,\n        small: 3,\n        tiny: 4\n      },\n      field: [],\n      ships: [],\n    },\n  },\n  \n  getters: {\n    // General Interfrace\n    getCurrentPlayerName: (state) => {\n      return state[state.currentPlayer].name\n    },\n    \n    getCurrentAvatar: (state) => {\n      return state[state.currentPlayer].imageUrl ? 'background-image: url(' + state[state.currentPlayer].imageUrl + ');' : ''\n    },\n\n    // Utility and mechanics\n    isMovesLeft: (state) => {\n      return state[state.currentPlayer].movesAvailable > 0\n    },\n\n    isShotsLeft: (state) => {\n      return state[state.currentPlayer].shotsAvailable > 0\n    },\n\n    getMovesLeft: (state) => {\n      return state[state.currentPlayer].movesAvailable\n    },\n\n    getShotsLeft: (state) => {\n      return state[state.currentPlayer].shotsAvailable\n    },\n\n    getFieldByParams: (state) => (player) => {\n      return state[player].field\n    },\n\n    getShipsByPlayer: (state) => (player) => {\n      return state[player].ships\n    },\n\n    getShipsAvailableByType: (state) => (type) => {\n      return state[state.currentPlayer].availableShips[type]\n    },\n\n    getShipsAvailableAll: (state) => {\n      let shipsAvailable = state[state.currentPlayer].availableShips\n      return (shipsAvailable['big'] + shipsAvailable['medium'] + shipsAvailable['small'] + shipsAvailable['tiny'])\n    },\n\n    isTileForbidden: (state) => (row, col) => {\n      return state[state.currentPlayer].field[row][col].forbid\n    },\n\n    isTileShip: (state) => (row, col) => {\n      return state[state.currentPlayer].field[row][col].ship\n    },\n\n    opponentFieldCheck: (state) => (row, col, item) => {\n      return state[state.opponent].field[row][col][item]\n    },\n\n    isControlDisabled: (state) => (row, col, size, direction) => {\n      let grid = state[state.currentPlayer].field\n      // Check for mines and ships in set directions\n      if (direction == 'up' && row - 1 >= 0) {\n        if ( grid[row - 1][col].mine ) { return true }\n        if ( row - 2 >= 0 && grid[row - 2][col].ship ) { return true }\n        if ( row - 2 >= 0 && col - 1 >= 0 && grid[row - 2][col - 1].ship ) { return true }\n        if ( row - 2 >= 0 && col + 1 <= 9 && grid[row - 2][col + 1].ship ) { return true }\n      } else if (direction == 'down' && row + size <= 9) {\n        if ( grid[row + size][col].mine ) { return true }\n        if ( row + size + 1 <= 9 && grid[row + size + 1][col].ship ) { return true }\n        if ( row + size + 1 <= 9 && col - 1 >= 0 && grid[row + size + 1][col - 1].ship ) { return true }\n        if ( row + size + 1 <= 9 && col + 1 <= 9 && grid[row + size + 1][col + 1].ship ) { return true }\n      } else if (direction == 'left' && col - 1 >= 0) {\n        if ( grid[row][col - 1].mine ) { return true }\n        if ( col - 2 >= 0 && grid[row][col - 2].ship ) { return true }\n        if ( col - 2 >= 0 && row - 1 >= 0 && grid[row - 1][col - 2].ship ) { return true }\n        if ( col - 2 >= 0 && row + 1 <= 9 && grid[row + 1][col - 2].ship ) { return true }\n      } else if (direction == 'right' && col + size <= 9) {\n        if ( grid[row][col + size].mine ) { return true }\n        if ( col + size + 1 <= 9 && grid[row][col + size + 1].ship ) { return true }\n        if ( col + size + 1 <= 9 && row - 1 >= 0 && grid[row - 1][col + size + 1].ship ) { return true }\n        if ( col + size + 1 <= 9 && row + 1 <= 9 && grid[row + 1][col + size + 1].ship ) { return true }\n        return grid[row][col + size].mine ? true : (col + size + 1 <= 9 && grid[row][col + size + 1].ship)\n      } else {\n        return false\n      }\n    },\n\n    getDamagedShip: (state) => (row, col) => {\n      let theirShips = state[state.opponent].ships\n      let targetShip = {}\n      // Get damaged ship specs\n      for (let ship of theirShips) {\n        for (let section of ship.tiles) {\n          if ( row == section.row && col == section.col ) {\n            targetShip = {\n              size: ship.size,\n              row: ship.row,\n              col: ship.col,\n              orientation: ship.orientation,\n            }\n          }\n        }\n      }\n      return targetShip\n    },\n\n    isShipDead: (state) => (damagedShip) => {\n      let deadTilesCount = 0\n      let theirShips = state[state.opponent].ships\n      for (let ship of theirShips) {\n        if ( damagedShip.row == ship.tiles[0].row && damagedShip.col == ship.tiles[0].col ) {\n          if ( damagedShip.orientation == 'height') {\n            for (let i = 0; i < damagedShip.size; i++) {\n              if ( state[state.opponent].field[damagedShip.row + i][damagedShip.col].ship && state[state.opponent].field[damagedShip.row + i][damagedShip.col].mine ) {\n                deadTilesCount++\n              }\n            }\n          } else {\n            for (let i = 0; i < damagedShip.size; i++) {\n              if ( state[state.opponent].field[damagedShip.row][damagedShip.col + i].ship && state[state.opponent].field[damagedShip.row][damagedShip.col + i].mine ) {\n                deadTilesCount++\n              }\n            }\n          }\n        }\n      }\n      return deadTilesCount == damagedShip.size\n    },\n\n    checkWinCondition: (state) => {\n      let deadShipsNumber = 0\n      for (let ship of state[state.opponent].ships) {\n        if (ship.isDead) { deadShipsNumber++ }\n      }\n      return deadShipsNumber == 10\n    }\n\n  },\n\n  mutations: {\n    // General Interface\n    sendAlertMessage (state, message) {\n      state.alertMessage = message\n    },\n\n    setCurrentPhase (state, phase) {\n      state.currentPhase = phase\n    },\n\n    updateCurrentPlayerName (state, e) {\n      state[state.currentPlayer].name = e.target.value\n    },\n\n    updateImageUrlOne (state, e) {\n      state.playerOne.imageUrl = e.target.value\n    },\n    updateImageUrlTwo (state, e) {\n      state.playerTwo.imageUrl = e.target.value\n    },\n\n    populateFieldByPlayer (state, player) {\n      let targetPlayer = player ? player : state.currentPlayer\n      let tiles = [] \n      for (let i = 0; i < 10; i++) {\n        let row = []\n        for (let k = 0; k < 10; k++) {\n          row.push({forbid: false, mine: false, dead: false})\n        }\n        tiles.push(row)\n      }\n      state[targetPlayer].field = tiles\n    },\n\n    toggleSettings (state) {\n      state.showSettings = !state.showSettings\n    },\n\n    // Utility and Mechanics\n    setLastShot (state, coordinates) {\n      let coordinateLetter = 'A'\n      switch (coordinates.col) {\n        case 1: coordinateLetter = 'A'; break\n        case 2: coordinateLetter = 'B'; break\n        case 3: coordinateLetter = 'C'; break\n        case 4: coordinateLetter = 'D'; break\n        case 5: coordinateLetter = 'E'; break\n        case 6: coordinateLetter = 'F'; break\n        case 7: coordinateLetter = 'G'; break\n        case 8: coordinateLetter = 'H'; break\n        case 9: coordinateLetter = 'I'; break\n        case 10: coordinateLetter = 'J'; break\n      }\n      state[state.currentPlayer].lastShot = coordinateLetter + coordinates.row\n    },\n\n    reduceMovesAvailable (state) {\n      state[state.currentPlayer].movesAvailable--\n    },\n\n    reduceShotsAvailable (state) {\n      state[state.currentPlayer].shotsAvailable--\n    },\n\n    setShipType (state, type) {\n      state.shipPlaceType = type\n    },\n\n    toggleOrientation (state) {\n      if (state.shipPlaceOrientation == 'height') {\n        state.shipPlaceOrientation = 'width'\n      } else {\n        state.shipPlaceOrientation = 'height'\n      }\n    },\n\n    placeMine (state, specs) {\n      state[state.opponent].field[specs.row][specs.col].mine = true\n    },\n\n    markShipDamaged (state, specs) {\n      let theirShips = state[state.opponent].ships\n      for (let ship of theirShips) {\n        for (let section of ship.tiles) {\n          if ( specs.row == section.row && specs.col == section.col ) {\n            ship.isDamaged = true\n            return\n          }\n        }\n      }\n    },\n\n    markShipDead (state, deadShip) {\n      let theirShips = state[state.opponent].ships\n      for (let ship of theirShips) {\n        if ( deadShip.row == ship.tiles[0].row && deadShip.col == ship.tiles[0].col ) {\n          ship.isDead = true\n          return\n        }\n      }\n    },\n\n    placeDeadTiles (state, deadShip) {\n      let deadTiles = []\n\n      if (deadShip.orientation == 'width') {\n        let rowWidth = deadShip.size + 2\n        for (let i = 0; i < rowWidth; i++) {\n          if ( 0 <= (deadShip.row - 1) && 0 <= (deadShip.col - 1 + i) && (deadShip.col - 1 + i) <= 9 ) {\n            deadTiles.push({ row: deadShip.row - 1, col: deadShip.col - 1 + i })\n          }\n          if ( (deadShip.row + 1) <= 9 && 0 <= (deadShip.col - 1 + i) && (deadShip.col - 1 + i) <= 9 ) {\n            deadTiles.push({ row: deadShip.row + 1, col: deadShip.col - 1 + i })\n          }\n        }\n        if( 0 <= (deadShip.col - 1) ) { deadTiles.push({ row: deadShip.row, col: deadShip.col - 1 }) }\n        if( (deadShip.col + deadShip.size) <= 9 ) { deadTiles.push({ row: deadShip.row, col: deadShip.col + deadShip.size }) }\n      } else {\n        let rowHeight = deadShip.size + 2\n        for (let j = 0; j < rowHeight; j++) {\n          if ( 0 <= (deadShip.col - 1) && 0 <= (deadShip.row - 1 + j) && (deadShip.row - 1 + j) <= 9 ) {\n            deadTiles.push({ col: deadShip.col - 1, row: deadShip.row - 1 + j })\n          }\n          if ( (deadShip.col + 1) <= 9 && 0 <= (deadShip.row - 1 + j) && (deadShip.row - 1 + j) <= 9 ) {\n            deadTiles.push({ col: deadShip.col + 1, row: deadShip.row - 1 + j })\n          }\n        }\n        if( 0 <= (deadShip.row - 1) ) { deadTiles.push({ row: deadShip.row - 1, col: deadShip.col }) }\n        if( (deadShip.row + deadShip.size) <= 9 ) { deadTiles.push({ row: deadShip.row + deadShip.size, col: deadShip.col }) }\n      }\n\n      for (let tile of deadTiles) {\n        state[state.opponent].field[tile.row][tile.col].dead = true\n      }\n    },\n\n    placeShipHead (state, specs) {\n      if (state[state.currentPlayer].availableShips[specs.type] >= 1) {\n        let newShip = {\n          classification: '',\n          col: specs.col,\n          row: specs.row,\n          size: specs.size,\n          orientation: specs.orientation,\n          tiles: specs.tiles,\n          isDamaged: false,\n          isDead: false,\n          style: 'left: ' + (specs.col * 10) + '%; top: ' + (specs.row * 10) + '%; ' + specs.orientation + ': ' + (specs.size * 10) + '%;'\n        }\n        newShip.classification = 'ship-' + state.shipPlaceType + ' ' + specs.orientation\n        state[state.currentPlayer].ships.push(newShip)\n        state[state.currentPlayer].availableShips[specs.type]--\n      } else {\n        return\n      }\n    },\n\n    placeShipTiles (state, shipTiles) {\n      for (let tile of shipTiles) {\n        state[state.currentPlayer].field[tile.row][tile.col].ship = true\n      }\n    },\n\n    moveShipTiles (state, movingShip) {\n      let myShips = state[state.currentPlayer].ships\n      // Get damaged ship specs\n      for (let ship of myShips) {\n        if ( movingShip.row == ship.row && movingShip.col == ship.col ) {\n          if ( movingShip.direction == 'up' ) {\n            // mark new ship cell and unmark old ship cell\n            state[state.currentPlayer].field[ship.row - 1][ship.col].ship = true\n            state[state.currentPlayer].field[ship.row - 1 + ship.size][ship.col].ship = false\n            // change ship coordinates\n            ship.row--\n            // pop'n'shift or push'n'unshift ship tiles array\n            ship.tiles.pop()\n            ship.tiles.unshift({row: ship.row, col: ship.col })\n          } else if ( movingShip.direction == 'down' ) {\n            state[state.currentPlayer].field[ship.row + ship.size][ship.col].ship = true\n            state[state.currentPlayer].field[ship.row][ship.col].ship = false\n            ship.tiles.shift()\n            ship.tiles.push({row: ship.row + ship.size, col: ship.col })\n            ship.row++\n          } else if ( movingShip.direction == 'left' ) {\n            state[state.currentPlayer].field[ship.row][ship.col - 1].ship = true\n            state[state.currentPlayer].field[ship.row][ship.col - 1 + ship.size].ship = false\n            ship.col--\n            ship.tiles.pop()\n            ship.tiles.unshift({row: ship.row, col: ship.col })\n          } else if ( movingShip.direction == 'right' ) {\n            state[state.currentPlayer].field[ship.row][ship.col + ship.size].ship = true\n            state[state.currentPlayer].field[ship.row][ship.col].ship = false\n            ship.tiles.shift()\n            ship.tiles.push({row: ship.row, col: ship.col + ship.size })\n            ship.col++\n          }\n          ship.style = 'left: ' + (ship.col * 10) + '%; top: ' + (ship.row * 10) + '%; ' + ship.orientation + ': ' + (ship.size * 10) + '%;'\n          return\n        }\n      }\n    },\n\n    placeForbiddenTiles (state, forbidTiles) {\n      for (let tile of forbidTiles) {\n        state[state.currentPlayer].field[tile.row][tile.col].forbid = true\n      }\n    },\n\n    resetField (state) {\n      state[state.currentPlayer].ships = []\n      state[state.currentPlayer].availableShips = { big: 1, medium: 2, small: 3, tiny: 4 }\n    },\n  },\n\n\n  actions: {\n    loadLocalData (context) {\n      // Player One\n      if ( JSON.parse( localStorage.getItem('TenShipsPlayerOneName') ) ) {\n        context.state.playerOne.name = JSON.parse(localStorage.getItem('TenShipsPlayerOneName'))\n      }\n      if ( JSON.parse( localStorage.getItem('TenShipsPlayerOneImage') ) ) {\n        context.state.playerOne.imageUrl = JSON.parse(localStorage.getItem('TenShipsPlayerOneImage'))\n      }\n      // Player Two\n      if ( JSON.parse( localStorage.getItem('TenShipsPlayerTwoName') ) ) {\n        context.state.playerTwo.name = JSON.parse(localStorage.getItem('TenShipsPlayerTwoName'))\n      }\n    },\n\n    advanceGamePhase (context) {\n      // Save stuff to Local Storage\n      localStorage.setItem('TenShipsPlayerOneName', JSON.stringify(context.state.playerOne.name))\n      localStorage.setItem('TenShipsPlayerTwoName', JSON.stringify(context.state.playerTwo.name))\n      // Advance game phases logic\n      switch (context.state.currentPhase) {\n        case 'readyPlayerOne':\n          context.state.currentPlayer = 'playerOne'\n          context.state.opponent = 'playerTwo'\n          context.state.currentPhase = 'goPlayerOne'\n          context.state.turnCount++\n          context.state.alertMessage = 'Шел ' + context.state.turnCount + '-й день сражений. '\n          if (context.state[context.state.opponent].lastShot) {\n            context.state.alertMessage += context.state[context.state.opponent].name + ' шлет привет в сектор ' + context.state[context.state.opponent].lastShot + '.'\n          }\n          context.state[context.state.currentPlayer].movesAvailable = 1\n          context.state[context.state.currentPlayer].shotsAvailable = 1\n          break\n        case 'readyPlayerTwo':\n          context.state.currentPlayer = 'playerTwo'\n          context.state.opponent = 'playerOne'\n          context.state.alertMessage = 'Yarr!'\n          if (context.getters.getShipsAvailableAll == 0) {\n            context.state.currentPhase = 'goPlayerTwo'\n            context.state[context.state.currentPlayer].movesAvailable = 1\n            context.state[context.state.currentPlayer].shotsAvailable = 1\n            context.state.alertMessage = 'Шел ' + context.state.turnCount + '-й день сражений. '\n            if (context.state[context.state.opponent].lastShot) {\n              context.state.alertMessage += context.state[context.state.opponent].name + ' шлет привет в сектор ' + context.state[context.state.opponent].lastShot + '.'\n            }\n          } else {\n          context.state.currentPhase = 'placeShipsTwo'\n          }\n          break\n        case 'placeShipsOne':\n        case 'goPlayerOne':\n          context.state.currentPhase = 'readyPlayerTwo'\n          break\n        case 'placeShipsTwo':\n        case 'goPlayerTwo':\n          context.state.currentPhase = 'readyPlayerOne'\n          break\n        default:\n          context.state.currentPhase = 'placeShipsOne'\n      }\n    },\n  }\n})\n"]}]}
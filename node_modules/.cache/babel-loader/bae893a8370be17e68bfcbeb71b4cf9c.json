{"remainingRequest":"D:\\git\\warships-evasive\\node_modules\\thread-loader\\dist\\cjs.js!D:\\git\\warships-evasive\\node_modules\\babel-loader\\lib\\index.js!D:\\git\\warships-evasive\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\git\\warships-evasive\\src\\store.js","dependencies":[{"path":"D:\\git\\warships-evasive\\src\\store.js","mtime":1557947715394},{"path":"D:\\git\\warships-evasive\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\git\\warships-evasive\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\git\\warships-evasive\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\git\\warships-evasive\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _JSON$stringify from \"D:\\\\git\\\\warships-evasive\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/json/stringify\";\nimport _getIterator from \"D:\\\\git\\\\warships-evasive\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/get-iterator\";\nimport \"core-js/modules/es6.string.small\";\nimport \"core-js/modules/es6.string.big\";\nimport \"core-js/modules/es6.function.name\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    alertMessage: 'Hello, beautiful!',\n    turnCount: 0,\n    // gameMenu, readyPlayerOne, placeShipsOne, readyPlayerTwo, placeShipsTwo, readyPlayerOne, goPlayerOne, readyPlayerTwo, goPlayerTwo\n    currentPhase: 'gameMenu',\n    currentPlayer: 'playerOne',\n    opponent: 'playerTwo',\n    shipPlaceType: 'big',\n    shipPlaceOrientation: 'height',\n    showSettings: false,\n    playerOne: {\n      name: 'Лихая Русалка',\n      imageUrl: '',\n      movesAvailable: 1,\n      shotsAvailable: 1,\n      lastShot: '',\n      availableShips: {\n        big: 1,\n        medium: 2,\n        small: 3,\n        tiny: 4\n      },\n      field: [],\n      ships: []\n    },\n    playerTwo: {\n      name: 'Волчья Голова',\n      imageUrl: '',\n      movesAvailable: 1,\n      shotsAvailable: 1,\n      lastShot: '',\n      availableShips: {\n        big: 1,\n        medium: 2,\n        small: 3,\n        tiny: 4\n      },\n      field: [],\n      ships: []\n    }\n  },\n  getters: {\n    // General Interfrace\n    getCurrentPlayerName: function getCurrentPlayerName(state) {\n      return state[state.currentPlayer].name;\n    },\n    getCurrentAvatar: function getCurrentAvatar(state) {\n      return state[state.currentPlayer].imageUrl ? 'background-image: url(' + state[state.currentPlayer].imageUrl + ');' : '';\n    },\n    // Utility and mechanics\n    isMovesLeft: function isMovesLeft(state) {\n      return state[state.currentPlayer].movesAvailable > 0;\n    },\n    isShotsLeft: function isShotsLeft(state) {\n      return state[state.currentPlayer].shotsAvailable > 0;\n    },\n    getMovesLeft: function getMovesLeft(state) {\n      return state[state.currentPlayer].movesAvailable;\n    },\n    getShotsLeft: function getShotsLeft(state) {\n      return state[state.currentPlayer].shotsAvailable;\n    },\n    getFieldByParams: function getFieldByParams(state) {\n      return function (player) {\n        return state[player].field;\n      };\n    },\n    getShipsByPlayer: function getShipsByPlayer(state) {\n      return function (player) {\n        return state[player].ships;\n      };\n    },\n    getShipsAvailableByType: function getShipsAvailableByType(state) {\n      return function (type) {\n        return state[state.currentPlayer].availableShips[type];\n      };\n    },\n    getShipsAvailableAll: function getShipsAvailableAll(state) {\n      var shipsAvailable = state[state.currentPlayer].availableShips;\n      return shipsAvailable['big'] + shipsAvailable['medium'] + shipsAvailable['small'] + shipsAvailable['tiny'];\n    },\n    isTileForbidden: function isTileForbidden(state) {\n      return function (row, col) {\n        return state[state.currentPlayer].field[row][col].forbid;\n      };\n    },\n    isTileShip: function isTileShip(state) {\n      return function (row, col) {\n        return state[state.currentPlayer].field[row][col].ship;\n      };\n    },\n    opponentFieldCheck: function opponentFieldCheck(state) {\n      return function (row, col, item) {\n        return state[state.opponent].field[row][col][item];\n      };\n    },\n    isControlDisabled: function isControlDisabled(state) {\n      return function (row, col, size, direction) {\n        var grid = state[state.currentPlayer].field; // Check for mines and ships in set directions\n\n        if (direction == 'up' && row - 1 >= 0) {\n          if (grid[row - 1][col].mine) {\n            return true;\n          }\n\n          if (row - 2 >= 0 && grid[row - 2][col].ship) {\n            return true;\n          }\n\n          if (row - 2 >= 0 && col - 1 >= 0 && grid[row - 2][col - 1].ship) {\n            return true;\n          }\n\n          if (row - 2 >= 0 && col + 1 <= 9 && grid[row - 2][col + 1].ship) {\n            return true;\n          }\n        } else if (direction == 'down' && row + size <= 9) {\n          if (grid[row + size][col].mine) {\n            return true;\n          }\n\n          if (row + size + 1 <= 9 && grid[row + size + 1][col].ship) {\n            return true;\n          }\n\n          if (row + size + 1 <= 9 && col - 1 >= 0 && grid[row + size + 1][col - 1].ship) {\n            return true;\n          }\n\n          if (row + size + 1 <= 9 && col + 1 <= 9 && grid[row + size + 1][col + 1].ship) {\n            return true;\n          }\n        } else if (direction == 'left' && col - 1 >= 0) {\n          if (grid[row][col - 1].mine) {\n            return true;\n          }\n\n          if (col - 2 >= 0 && grid[row][col - 2].ship) {\n            return true;\n          }\n\n          if (col - 2 >= 0 && row - 1 >= 0 && grid[row - 1][col - 2].ship) {\n            return true;\n          }\n\n          if (col - 2 >= 0 && row + 1 <= 9 && grid[row + 1][col - 2].ship) {\n            return true;\n          }\n        } else if (direction == 'right' && col + size <= 9) {\n          if (grid[row][col + size].mine) {\n            return true;\n          }\n\n          if (col + size + 1 <= 9 && grid[row][col + size + 1].ship) {\n            return true;\n          }\n\n          if (col + size + 1 <= 9 && row - 1 >= 0 && grid[row - 1][col + size + 1].ship) {\n            return true;\n          }\n\n          if (col + size + 1 <= 9 && row + 1 <= 9 && grid[row + 1][col + size + 1].ship) {\n            return true;\n          }\n\n          return grid[row][col + size].mine ? true : col + size + 1 <= 9 && grid[row][col + size + 1].ship;\n        } else {\n          return false;\n        }\n      };\n    },\n    getDamagedShip: function getDamagedShip(state) {\n      return function (row, col) {\n        var theirShips = state[state.opponent].ships;\n        var targetShip = {}; // Get damaged ship specs\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = _getIterator(theirShips), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var ship = _step.value;\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = _getIterator(ship.tiles), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var section = _step2.value;\n\n                if (row == section.row && col == section.col) {\n                  targetShip = {\n                    size: ship.size,\n                    row: ship.row,\n                    col: ship.col,\n                    orientation: ship.orientation\n                  };\n                }\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return targetShip;\n      };\n    },\n    isShipDead: function isShipDead(state) {\n      return function (damagedShip) {\n        var deadTilesCount = 0;\n        var theirShips = state[state.opponent].ships;\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = _getIterator(theirShips), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var ship = _step3.value;\n\n            if (damagedShip.row == ship.tiles[0].row && damagedShip.col == ship.tiles[0].col) {\n              if (damagedShip.orientation == 'height') {\n                for (var i = 0; i < damagedShip.size; i++) {\n                  if (state[state.opponent].field[damagedShip.row + i][damagedShip.col].ship && state[state.opponent].field[damagedShip.row + i][damagedShip.col].mine) {\n                    deadTilesCount++;\n                  }\n                }\n              } else {\n                for (var _i = 0; _i < damagedShip.size; _i++) {\n                  if (state[state.opponent].field[damagedShip.row][damagedShip.col + _i].ship && state[state.opponent].field[damagedShip.row][damagedShip.col + _i].mine) {\n                    deadTilesCount++;\n                  }\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n\n        return deadTilesCount == damagedShip.size;\n      };\n    },\n    checkWinCondition: function checkWinCondition(state) {\n      var deadShipsNumber = 0;\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = _getIterator(state[state.opponent].ships), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var ship = _step4.value;\n\n          if (ship.isDead) {\n            deadShipsNumber++;\n          }\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      return deadShipsNumber == 10;\n    }\n  },\n  mutations: {\n    // General Interface\n    sendAlertMessage: function sendAlertMessage(state, message) {\n      state.alertMessage = message;\n    },\n    setCurrentPhase: function setCurrentPhase(state, phase) {\n      state.currentPhase = phase;\n    },\n    updateCurrentPlayerName: function updateCurrentPlayerName(state, e) {\n      state[state.currentPlayer].name = e.target.value;\n      localStorage.setItem('TenShipsPlayerOneName', _JSON$stringify(state.playerOne.name));\n      localStorage.setItem('TenShipsPlayerTwoName', _JSON$stringify(state.playerTwo.name));\n    },\n    updateImageUrlOne: function updateImageUrlOne(state, e) {\n      state.playerOne.imageUrl = e.target.value;\n      localStorage.setItem('TenShipsPlayerOneImage', _JSON$stringify(state.playerOne.imageUrl));\n    },\n    updateImageUrlTwo: function updateImageUrlTwo(state, e) {\n      state.playerTwo.imageUrl = e.target.value;\n      localStorage.setItem('TenShipsPlayerTwoImage', _JSON$stringify(state.playerTwo.imageUrl));\n    },\n    removeAvatars: function removeAvatars(state) {\n      state.playerOne.name = 'Лихая Русалка';\n      state.playerTwo.name = 'Волчья Голова';\n      state.playerOne.imageUrl = '';\n      state.playerTwo.imageUrl = '';\n    },\n    populateFieldByPlayer: function populateFieldByPlayer(state, player) {\n      var targetPlayer = player ? player : state.currentPlayer;\n      var tiles = [];\n\n      for (var i = 0; i < 10; i++) {\n        var row = [];\n\n        for (var k = 0; k < 10; k++) {\n          row.push({\n            forbid: false,\n            mine: false,\n            dead: false\n          });\n        }\n\n        tiles.push(row);\n      }\n\n      state[targetPlayer].field = tiles;\n    },\n    toggleSettings: function toggleSettings(state) {\n      state.showSettings = !state.showSettings;\n    },\n    // Utility and Mechanics\n    setLastShot: function setLastShot(state, coordinates) {\n      var coordinateLetter = 'A';\n\n      switch (coordinates.col) {\n        case 1:\n          coordinateLetter = 'A';\n          break;\n\n        case 2:\n          coordinateLetter = 'B';\n          break;\n\n        case 3:\n          coordinateLetter = 'C';\n          break;\n\n        case 4:\n          coordinateLetter = 'D';\n          break;\n\n        case 5:\n          coordinateLetter = 'E';\n          break;\n\n        case 6:\n          coordinateLetter = 'F';\n          break;\n\n        case 7:\n          coordinateLetter = 'G';\n          break;\n\n        case 8:\n          coordinateLetter = 'H';\n          break;\n\n        case 9:\n          coordinateLetter = 'I';\n          break;\n\n        case 10:\n          coordinateLetter = 'J';\n          break;\n      }\n\n      state[state.currentPlayer].lastShot = coordinateLetter + coordinates.row;\n    },\n    reduceMovesAvailable: function reduceMovesAvailable(state) {\n      state[state.currentPlayer].movesAvailable--;\n    },\n    reduceShotsAvailable: function reduceShotsAvailable(state) {\n      state[state.currentPlayer].shotsAvailable--;\n    },\n    setShipType: function setShipType(state, type) {\n      state.shipPlaceType = type;\n    },\n    toggleOrientation: function toggleOrientation(state) {\n      if (state.shipPlaceOrientation == 'height') {\n        state.shipPlaceOrientation = 'width';\n      } else {\n        state.shipPlaceOrientation = 'height';\n      }\n    },\n    placeMine: function placeMine(state, specs) {\n      state[state.opponent].field[specs.row][specs.col].mine = true;\n    },\n    markShipDamaged: function markShipDamaged(state, specs) {\n      var theirShips = state[state.opponent].ships;\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = _getIterator(theirShips), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var ship = _step5.value;\n          var _iteratorNormalCompletion6 = true;\n          var _didIteratorError6 = false;\n          var _iteratorError6 = undefined;\n\n          try {\n            for (var _iterator6 = _getIterator(ship.tiles), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n              var section = _step6.value;\n\n              if (specs.row == section.row && specs.col == section.col) {\n                ship.isDamaged = true;\n                return;\n              }\n            }\n          } catch (err) {\n            _didIteratorError6 = true;\n            _iteratorError6 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n                _iterator6.return();\n              }\n            } finally {\n              if (_didIteratorError6) {\n                throw _iteratorError6;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n    },\n    markShipDead: function markShipDead(state, deadShip) {\n      var theirShips = state[state.opponent].ships;\n      var _iteratorNormalCompletion7 = true;\n      var _didIteratorError7 = false;\n      var _iteratorError7 = undefined;\n\n      try {\n        for (var _iterator7 = _getIterator(theirShips), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n          var ship = _step7.value;\n\n          if (deadShip.row == ship.tiles[0].row && deadShip.col == ship.tiles[0].col) {\n            ship.isDead = true;\n            return;\n          }\n        }\n      } catch (err) {\n        _didIteratorError7 = true;\n        _iteratorError7 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n            _iterator7.return();\n          }\n        } finally {\n          if (_didIteratorError7) {\n            throw _iteratorError7;\n          }\n        }\n      }\n    },\n    placeDeadTiles: function placeDeadTiles(state, deadShip) {\n      var deadTiles = [];\n\n      if (deadShip.orientation == 'width') {\n        var rowWidth = deadShip.size + 2;\n\n        for (var i = 0; i < rowWidth; i++) {\n          if (0 <= deadShip.row - 1 && 0 <= deadShip.col - 1 + i && deadShip.col - 1 + i <= 9) {\n            deadTiles.push({\n              row: deadShip.row - 1,\n              col: deadShip.col - 1 + i\n            });\n          }\n\n          if (deadShip.row + 1 <= 9 && 0 <= deadShip.col - 1 + i && deadShip.col - 1 + i <= 9) {\n            deadTiles.push({\n              row: deadShip.row + 1,\n              col: deadShip.col - 1 + i\n            });\n          }\n        }\n\n        if (0 <= deadShip.col - 1) {\n          deadTiles.push({\n            row: deadShip.row,\n            col: deadShip.col - 1\n          });\n        }\n\n        if (deadShip.col + deadShip.size <= 9) {\n          deadTiles.push({\n            row: deadShip.row,\n            col: deadShip.col + deadShip.size\n          });\n        }\n      } else {\n        var rowHeight = deadShip.size + 2;\n\n        for (var j = 0; j < rowHeight; j++) {\n          if (0 <= deadShip.col - 1 && 0 <= deadShip.row - 1 + j && deadShip.row - 1 + j <= 9) {\n            deadTiles.push({\n              col: deadShip.col - 1,\n              row: deadShip.row - 1 + j\n            });\n          }\n\n          if (deadShip.col + 1 <= 9 && 0 <= deadShip.row - 1 + j && deadShip.row - 1 + j <= 9) {\n            deadTiles.push({\n              col: deadShip.col + 1,\n              row: deadShip.row - 1 + j\n            });\n          }\n        }\n\n        if (0 <= deadShip.row - 1) {\n          deadTiles.push({\n            row: deadShip.row - 1,\n            col: deadShip.col\n          });\n        }\n\n        if (deadShip.row + deadShip.size <= 9) {\n          deadTiles.push({\n            row: deadShip.row + deadShip.size,\n            col: deadShip.col\n          });\n        }\n      }\n\n      for (var _i2 = 0, _deadTiles = deadTiles; _i2 < _deadTiles.length; _i2++) {\n        var tile = _deadTiles[_i2];\n        state[state.opponent].field[tile.row][tile.col].dead = true;\n      }\n    },\n    placeShipHead: function placeShipHead(state, specs) {\n      if (state[state.currentPlayer].availableShips[specs.type] >= 1) {\n        var newShip = {\n          classification: '',\n          col: specs.col,\n          row: specs.row,\n          size: specs.size,\n          orientation: specs.orientation,\n          tiles: specs.tiles,\n          isDamaged: false,\n          isDead: false,\n          style: 'left: ' + specs.col * 10 + '%; top: ' + specs.row * 10 + '%; ' + specs.orientation + ': ' + specs.size * 10 + '%;'\n        };\n        newShip.classification = 'ship-' + state.shipPlaceType + ' ' + specs.orientation;\n        state[state.currentPlayer].ships.push(newShip);\n        state[state.currentPlayer].availableShips[specs.type]--;\n      } else {\n        return;\n      }\n    },\n    placeShipTiles: function placeShipTiles(state, shipTiles) {\n      var _iteratorNormalCompletion8 = true;\n      var _didIteratorError8 = false;\n      var _iteratorError8 = undefined;\n\n      try {\n        for (var _iterator8 = _getIterator(shipTiles), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n          var tile = _step8.value;\n          state[state.currentPlayer].field[tile.row][tile.col].ship = true;\n        }\n      } catch (err) {\n        _didIteratorError8 = true;\n        _iteratorError8 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n            _iterator8.return();\n          }\n        } finally {\n          if (_didIteratorError8) {\n            throw _iteratorError8;\n          }\n        }\n      }\n    },\n    moveShipTiles: function moveShipTiles(state, movingShip) {\n      var myShips = state[state.currentPlayer].ships; // Get damaged ship specs\n\n      var _iteratorNormalCompletion9 = true;\n      var _didIteratorError9 = false;\n      var _iteratorError9 = undefined;\n\n      try {\n        for (var _iterator9 = _getIterator(myShips), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n          var ship = _step9.value;\n\n          if (movingShip.row == ship.row && movingShip.col == ship.col) {\n            if (movingShip.direction == 'up') {\n              // mark new ship cell and unmark old ship cell\n              state[state.currentPlayer].field[ship.row - 1][ship.col].ship = true;\n              state[state.currentPlayer].field[ship.row - 1 + ship.size][ship.col].ship = false; // change ship coordinates\n\n              ship.row--; // pop'n'shift or push'n'unshift ship tiles array\n\n              ship.tiles.pop();\n              ship.tiles.unshift({\n                row: ship.row,\n                col: ship.col\n              });\n            } else if (movingShip.direction == 'down') {\n              state[state.currentPlayer].field[ship.row + ship.size][ship.col].ship = true;\n              state[state.currentPlayer].field[ship.row][ship.col].ship = false;\n              ship.tiles.shift();\n              ship.tiles.push({\n                row: ship.row + ship.size,\n                col: ship.col\n              });\n              ship.row++;\n            } else if (movingShip.direction == 'left') {\n              state[state.currentPlayer].field[ship.row][ship.col - 1].ship = true;\n              state[state.currentPlayer].field[ship.row][ship.col - 1 + ship.size].ship = false;\n              ship.col--;\n              ship.tiles.pop();\n              ship.tiles.unshift({\n                row: ship.row,\n                col: ship.col\n              });\n            } else if (movingShip.direction == 'right') {\n              state[state.currentPlayer].field[ship.row][ship.col + ship.size].ship = true;\n              state[state.currentPlayer].field[ship.row][ship.col].ship = false;\n              ship.tiles.shift();\n              ship.tiles.push({\n                row: ship.row,\n                col: ship.col + ship.size\n              });\n              ship.col++;\n            }\n\n            ship.style = 'left: ' + ship.col * 10 + '%; top: ' + ship.row * 10 + '%; ' + ship.orientation + ': ' + ship.size * 10 + '%;';\n            return;\n          }\n        }\n      } catch (err) {\n        _didIteratorError9 = true;\n        _iteratorError9 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n            _iterator9.return();\n          }\n        } finally {\n          if (_didIteratorError9) {\n            throw _iteratorError9;\n          }\n        }\n      }\n    },\n    placeForbiddenTiles: function placeForbiddenTiles(state, forbidTiles) {\n      var _iteratorNormalCompletion10 = true;\n      var _didIteratorError10 = false;\n      var _iteratorError10 = undefined;\n\n      try {\n        for (var _iterator10 = _getIterator(forbidTiles), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n          var tile = _step10.value;\n          state[state.currentPlayer].field[tile.row][tile.col].forbid = true;\n        }\n      } catch (err) {\n        _didIteratorError10 = true;\n        _iteratorError10 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion10 && _iterator10.return != null) {\n            _iterator10.return();\n          }\n        } finally {\n          if (_didIteratorError10) {\n            throw _iteratorError10;\n          }\n        }\n      }\n    },\n    resetField: function resetField(state) {\n      state[state.currentPlayer].ships = [];\n      state[state.currentPlayer].availableShips = {\n        big: 1,\n        medium: 2,\n        small: 3,\n        tiny: 4\n      };\n    }\n  },\n  actions: {\n    loadLocalData: function loadLocalData(context) {\n      // Player One\n      if (JSON.parse(localStorage.getItem('TenShipsPlayerOneName'))) {\n        context.state.playerOne.name = JSON.parse(localStorage.getItem('TenShipsPlayerOneName'));\n      }\n\n      if (JSON.parse(localStorage.getItem('TenShipsPlayerOneImage'))) {\n        context.state.playerOne.imageUrl = JSON.parse(localStorage.getItem('TenShipsPlayerOneImage'));\n      } // Player Two\n\n\n      if (JSON.parse(localStorage.getItem('TenShipsPlayerTwoName'))) {\n        context.state.playerTwo.name = JSON.parse(localStorage.getItem('TenShipsPlayerTwoName'));\n      }\n\n      if (JSON.parse(localStorage.getItem('TenShipsPlayerTwoImage'))) {\n        context.state.playerTwo.imageUrl = JSON.parse(localStorage.getItem('TenShipsPlayerTwoImage'));\n      }\n    },\n    advanceGamePhase: function advanceGamePhase(context) {\n      // Advance game phases logic\n      switch (context.state.currentPhase) {\n        case 'readyPlayerOne':\n          context.state.currentPlayer = 'playerOne';\n          context.state.opponent = 'playerTwo';\n          context.state.currentPhase = 'goPlayerOne';\n          context.state.turnCount++;\n          context.state.alertMessage = 'Шел ' + context.state.turnCount + '-й день сражений. ';\n\n          if (context.state[context.state.opponent].lastShot) {\n            context.state.alertMessage += context.state[context.state.opponent].name + ' шлет привет в сектор ' + context.state[context.state.opponent].lastShot + '.';\n          }\n\n          context.state[context.state.currentPlayer].movesAvailable = 1;\n          context.state[context.state.currentPlayer].shotsAvailable = 1;\n          break;\n\n        case 'readyPlayerTwo':\n          context.state.currentPlayer = 'playerTwo';\n          context.state.opponent = 'playerOne';\n          context.state.alertMessage = 'Yarr!';\n\n          if (context.getters.getShipsAvailableAll == 0) {\n            context.state.currentPhase = 'goPlayerTwo';\n            context.state[context.state.currentPlayer].movesAvailable = 1;\n            context.state[context.state.currentPlayer].shotsAvailable = 1;\n            context.state.alertMessage = 'Шел ' + context.state.turnCount + '-й день сражений. ';\n\n            if (context.state[context.state.opponent].lastShot) {\n              context.state.alertMessage += context.state[context.state.opponent].name + ' шлет привет в сектор ' + context.state[context.state.opponent].lastShot + '.';\n            }\n          } else {\n            context.state.currentPhase = 'placeShipsTwo';\n          }\n\n          break;\n\n        case 'placeShipsOne':\n        case 'goPlayerOne':\n          context.state.currentPhase = 'readyPlayerTwo';\n          break;\n\n        case 'placeShipsTwo':\n        case 'goPlayerTwo':\n          context.state.currentPhase = 'readyPlayerOne';\n          break;\n\n        default:\n          context.state.currentPhase = 'placeShipsOne';\n      }\n    }\n  }\n});",null]}
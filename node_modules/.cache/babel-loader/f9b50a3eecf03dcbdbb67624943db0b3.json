{"remainingRequest":"D:\\git\\warships-evasive\\node_modules\\thread-loader\\dist\\cjs.js!D:\\git\\warships-evasive\\node_modules\\babel-loader\\lib\\index.js!D:\\git\\warships-evasive\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\git\\warships-evasive\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\git\\warships-evasive\\src\\components\\FieldGrid.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\git\\warships-evasive\\src\\components\\FieldGrid.vue","mtime":1557913826968},{"path":"D:\\git\\warships-evasive\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\git\\warships-evasive\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\git\\warships-evasive\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\git\\warships-evasive\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\git\\warships-evasive\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _getIterator from \"D:\\\\git\\\\warships-evasive\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/get-iterator\";\nimport _objectSpread from \"D:\\\\git\\\\warships-evasive\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters, mapMutations } from 'vuex';\nexport default {\n  name: 'FieldGrid',\n  props: {\n    player: String\n  },\n  computed: _objectSpread({}, mapGetters(['getFieldByParams', 'getShipsAvailableByType', 'getShipsAvailableAll', 'isTileForbidden', 'isTileShip', 'opponentFieldCheck'])),\n  methods: _objectSpread({}, mapMutations(['sendAlertMessage', 'placeShipHead', 'placeShipTiles', 'placeForbiddenTiles', 'placeMine', 'setShipType', 'markShipDamaged']), {\n    placeShip: function placeShip(row, col) {\n      var type = this.$store.state.shipPlaceType; // Check if there are available ships of selected type\n\n      if (this.getShipsAvailableAll <= 0) {\n        this.sendAlertMessage('Все корабли запущены. Пора идти в атаку.');\n        return;\n      } else if (this.getShipsAvailableByType(type) <= 0) {\n        this.sendAlertMessage('Таких кораблей больше нет. Пиратский бюджет, крюком его по япкам!');\n        this.switchShipButtons(type);\n        return;\n      } // Determine size\n\n\n      var orientation = this.$store.state.shipPlaceOrientation;\n      var size = 1;\n\n      if (type == 'big') {\n        size = 4;\n      } else if (type == 'medium') {\n        size = 3;\n      } else if (type == 'small') {\n        size = 2;\n      } else {\n        size = 1;\n      } // Check if placeable\n\n\n      var shipTiles = this.getShipTiles(row, col, orientation, size);\n      var isPlaceable = this.checkPlaceability(row, col, orientation, size, shipTiles);\n\n      if (isPlaceable) {\n        // Place head\n        this.placeShipHead({\n          row: row,\n          col: col,\n          type: type,\n          size: size,\n          orientation: orientation,\n          tiles: shipTiles\n        }); // Place ship tiles\n\n        this.placeShipTiles(shipTiles); // Place forbidden tiles\n\n        var forbidTiles = this.getTilesToForbid(row, col, orientation, size);\n        this.placeForbiddenTiles(forbidTiles);\n      } else {\n        return;\n      } // Cycle ship selection buttons\n\n\n      this.switchShipButtons(type);\n    },\n    // Switch ship type button to the right if no more ships of this type left\n    switchShipButtons: function switchShipButtons(type) {\n      if (this.getShipsAvailableByType(type) == 0) {\n        if (type == 'big') {\n          this.setShipType('medium');\n        } else if (type == 'medium') {\n          this.setShipType('small');\n        } else if (type == 'small') {\n          this.setShipType('tiny');\n        } else if (type == 'tiny' && this.getShipsAvailableAll !== 0) {\n          this.setShipType('big');\n        }\n      }\n    },\n    // Generate a list of ship tiles\n    getShipTiles: function getShipTiles(row, col, orientation, size) {\n      var shipTiles = [{\n        row: row,\n        col: col\n      }];\n\n      for (var i = 1; i < size; i++) {\n        if (orientation == 'width') {\n          shipTiles.push({\n            row: row,\n            col: col + i\n          });\n        } else {\n          shipTiles.push({\n            row: row + i,\n            col: col\n          });\n        }\n      }\n\n      return shipTiles;\n    },\n    getTilesToForbid: function getTilesToForbid(row, col, orientation, size) {\n      var forbidTiles = [];\n\n      if (orientation == 'width') {\n        var rowWidth = size + 2;\n\n        for (var i = 0; i < rowWidth; i++) {\n          if (0 <= row - 1 && 0 <= col - 1 + i && col - 1 + i <= 9) {\n            forbidTiles.push({\n              row: row - 1,\n              col: col - 1 + i\n            });\n          }\n\n          if (row + 1 <= 9 && 0 <= col - 1 + i && col - 1 + i <= 9) {\n            forbidTiles.push({\n              row: row + 1,\n              col: col - 1 + i\n            });\n          }\n        }\n\n        if (0 <= col - 1) {\n          forbidTiles.push({\n            row: row,\n            col: col - 1\n          });\n        }\n\n        if (col + size <= 9) {\n          forbidTiles.push({\n            row: row,\n            col: col + size\n          });\n        }\n      } else {\n        var rowHeight = size + 2;\n\n        for (var j = 0; j < rowHeight; j++) {\n          if (0 <= col - 1 && 0 <= row - 1 + j && row - 1 + j <= 9) {\n            forbidTiles.push({\n              col: col - 1,\n              row: row - 1 + j\n            });\n          }\n\n          if (col + 1 <= 9 && 0 <= row - 1 + j && row - 1 + j <= 9) {\n            forbidTiles.push({\n              col: col + 1,\n              row: row - 1 + j\n            });\n          }\n        }\n\n        if (0 <= row - 1) {\n          forbidTiles.push({\n            row: row - 1,\n            col: col\n          });\n        }\n\n        if (row + size <= 9) {\n          forbidTiles.push({\n            row: row + size,\n            col: col\n          });\n        }\n      }\n\n      return forbidTiles;\n    },\n    checkPlaceability: function checkPlaceability(row, col, orientation, size, shipTiles) {\n      var shipEnd = {\n        row: row,\n        col: col\n      };\n\n      if (orientation == 'width') {\n        shipEnd.col = col - 1 + size;\n      } else {\n        shipEnd.row = row - 1 + size;\n      } // 1. Check if ship sticks outside the board\n\n\n      if (shipEnd.col > 9 || shipEnd.row > 9) {\n        this.sendAlertMessage('Корабль никак не может торчать за картой!');\n        return false;\n      } // 2. Check if ship tiles will cross with forbidden\n      // 2.1. Check each ship tile against forbidden cells and ship cells\n\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _getIterator(shipTiles), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var tile = _step.value;\n\n          if (this.isTileForbidden(tile.row, tile.col) || this.isTileShip(tile.row, tile.col)) {\n            this.sendAlertMessage('Таранить будем чужие корабли, свои не надо.');\n            return false;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return true;\n    },\n    printForbidden: function printForbidden() {\n      this.sendAlertMessage('Тут уже что-то есть!');\n    }\n  })\n};",null]}